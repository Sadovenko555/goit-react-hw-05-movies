{"version":3,"file":"static/js/83.60a1145c.chunk.js","mappings":"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","sources":["components/MovieInfo/MovieInfo.styled.jsx","components/MovieInfo/MovieInfo.jsx","pages/MovieDetails/MovieDetails.styled.jsx","pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const MovieInfoContainer = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n  margin-bottom: 1rem;\n\n  img {\n    width: 200px;\n    height: 300px;\n    object-fit: cover;\n    border-radius: 8px;\n    box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1);\n  }\n`;\n\nexport const MovieDetails = styled.div`\n  flex: 1;\n`;\n\nexport const MovieTitle = styled.h2`\n  font-size: 1.5rem;\n  margin: 0;\n`;\n\nexport const UserScore = styled.p`\n  font-weight: bold;\n`;\n\nexport const OverviewTitle = styled.h3`\n  margin: 1rem 0 0.5rem;\n`;\n\nexport const GenresTitle = styled.h3`\n  margin: 1rem 0 0.5rem;\n`;\n\nexport const GenresList = styled.p`\n  margin: 0;\n`;\n","import PropTypes from 'prop-types';\nimport { MovieInfoContainer, MovieDetails, MovieTitle, UserScore, OverviewTitle, GenresTitle, GenresList } from './MovieInfo.styled';\n\nconst MovieInfo = ({ movie }) => {\n    if (!movie) {\n        return null;\n    }\n\n    const { vote_average, genres, poster_path, title, name, overview } = movie;\n\n    const persentageRate = Math.round((vote_average / 10) * 100);\n\n    const img = poster_path\n        ? `https://image.tmdb.org/t/p/w342/${poster_path}`\n        : \"\";\n\n    const movieGenres = genres && genres.length >= 1\n        ? genres.map(genre => genre.name).join(', ')\n        : 'No genres';\n\n    return (\n        <MovieInfoContainer>\n            <img src={img} alt={title} />\n            <MovieDetails>\n                <MovieTitle>{title || name}</MovieTitle>\n                <UserScore>User Score: {persentageRate}%</UserScore>\n                <OverviewTitle>Owerview</OverviewTitle>\n                <p>{overview}</p>\n                <GenresTitle>Genres</GenresTitle>\n                <GenresList>{movieGenres}</GenresList>\n            </MovieDetails>\n        </MovieInfoContainer>\n    );\n}\n\nMovieInfo.propTypes = {\n  movie: PropTypes.object.isRequired,\n};\n\nexport default MovieInfo;\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const MovieDetailsContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 2rem;\n`;\n\nexport const BackLink = styled(Link)`\n  margin-bottom: 1rem;\n  font-weight: bold;\n  color: orange;\n  text-decoration: none;\n  transition: color 0.3s;\n\n  &:hover {\n    color: darkorange;\n  }\n`;\n\nexport const LinksList = styled.ul`\n  list-style: none;\n  display: flex;\n  gap: 1rem;\n  margin-top: 1rem;\n`;\n\nexport const NavLink = styled(Link)`\n  color: black;\n  text-decoration: none;\n  font-weight: bold;\n  transition: color 0.3s;\n\n  &:hover {\n    color: orange;\n  }\n`;\n","import React, { useEffect, useState } from \"react\";\nimport { useParams, Outlet, useLocation } from \"react-router-dom\";\nimport { Suspense } from \"react\";\nimport MovieInfo from \"components/MovieInfo/MovieInfo\";\nimport { MovieDetailsContainer, BackLink, LinksList, NavLink } from './MovieDetails.styled';\nimport MovieAPI from \"services/fetchAPI\";\n\nconst movieAPI = new MovieAPI();\n\nconst MovieDetails = () => {\n    const { movieId } = useParams();\n    const [movie, setMovie] = useState({});\n    const location = useLocation();\n    const backBtn = location.state?.from ?? '/';\n\n    useEffect(() => {\n        getMovieById(movieId);\n    }, [movieId]);\n\n    const getMovieById = async (movieId) => {\n        try {\n            const resp = await movieAPI.MovieById(movieId);\n            setMovie(resp);\n        } catch (error) {\n            console.log(\"Error searching movies:\", error);\n        }\n    };\n\n    return (\n        <MovieDetailsContainer>\n            <BackLink to={backBtn}>Back to movies</BackLink>\n            <MovieInfo movie={movie} />\n            <LinksList>\n                <li>\n                    <NavLink to=\"cast\" state={{ from: backBtn }}>\n                        Cast\n                    </NavLink>\n                </li>\n                <li>\n                    <NavLink to=\"reviews\" state={{ from: backBtn }}>\n                        Reviews\n                    </NavLink>\n                </li>\n            </LinksList>\n            <Suspense fallback={<div>Loading...</div>}>\n                <Outlet />\n            </Suspense>\n        </MovieDetailsContainer>\n    );\n};\n\nexport default MovieDetails;\n"],"names":["MovieInfoContainer","styled","_templateObject","_taggedTemplateLiteral","MovieDetails","_templateObject2","MovieTitle","_templateObject3","UserScore","_templateObject4","OverviewTitle","_templateObject5","GenresTitle","_templateObject6","GenresList","_templateObject7","_ref","movie","vote_average","genres","poster_path","title","name","overview","persentageRate","Math","round","img","concat","movieGenres","length","map","genre","join","_jsxs","children","_jsx","src","alt","MovieDetailsContainer","BackLink","Link","LinksList","NavLink","movieAPI","MovieAPI","_location$state$from","_location$state","movieId","useParams","_useState","useState","_useState2","_slicedToArray","setMovie","backBtn","useLocation","state","from","useEffect","getMovieById","_asyncToGenerator","_regeneratorRuntime","mark","_callee","resp","wrap","_context","prev","next","MovieById","sent","t0","console","log","stop","_x","apply","arguments","to","MovieInfo","Suspense","fallback","Outlet"],"sourceRoot":""}